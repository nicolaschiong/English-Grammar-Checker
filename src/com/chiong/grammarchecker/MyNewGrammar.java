package grammarchecker;

/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
public class MyNewGrammar implements MyNewGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Grammar Checker");
      System.out.print("Enter an sentence or phrase, must be TREEBANK TAGGED: ");
      try
      {
        switch (MyNewGrammar.start())
        {
          case 0 :
          System.out.println("\u005cn\u005cnThis is gramatically correct.\u005cn\u005cn");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINER:
    case ADJECTIVE:
    case ADJECTIVE_COMPARATIVE:
    case ADJECTIVE_SUPERLATIVE:
    case VERB_MODAL_AUXILLIARY:
    case NOUN_SINGULAR:
    case NOUN_PLURAL:
    case NOUN_PROPER_SINGULAR:
    case NOUN_PROPER_PLURAL:
    case VERB_BASE:
    case VERB_3RD_PERSON_SINGULAR_PRESENT:
    case VERB_PAST_TENSE:
    case VERB_PAST_PARTICIPLE:
    case VERB_PRESENT_PARTICIPLE:
      sentence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COORDINATING_CONJUNCTION:
        jj_consume_token(COORDINATING_CONJUNCTION);
        sentence();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(PUNCTUATION_MARK_COLON);
    {if (true) return 0;}
      break;
    case PUNCTUATION_MARK_COLON:
      jj_consume_token(PUNCTUATION_MARK_COLON);
    {if (true) return 1;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void sentence() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINER:
    case ADJECTIVE:
    case ADJECTIVE_COMPARATIVE:
    case ADJECTIVE_SUPERLATIVE:
    case VERB_MODAL_AUXILLIARY:
    case NOUN_SINGULAR:
    case NOUN_PLURAL:
    case NOUN_PROPER_SINGULAR:
    case NOUN_PROPER_PLURAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERB_MODAL_AUXILLIARY:
        jj_consume_token(VERB_MODAL_AUXILLIARY);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      noun_phrase();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COORDINATING_CONJUNCTION:
        jj_consume_token(COORDINATING_CONJUNCTION);
        noun_phrase();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      verb_phrase();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COORDINATING_CONJUNCTION:
        jj_consume_token(COORDINATING_CONJUNCTION);
        verb_phrase();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      break;
    case VERB_BASE:
    case VERB_3RD_PERSON_SINGULAR_PRESENT:
    case VERB_PAST_TENSE:
    case VERB_PAST_PARTICIPLE:
    case VERB_PRESENT_PARTICIPLE:
      verb_phrase();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COORDINATING_CONJUNCTION:
        jj_consume_token(COORDINATING_CONJUNCTION);
        verb_phrase();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void noun_phrase() throws ParseException {
 System.out.print("\u005cn(NOUN PHRASE \u005cn\u005ct");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINER:
      determiner();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJECTIVE:
    case ADJECTIVE_COMPARATIVE:
    case ADJECTIVE_SUPERLATIVE:
      adjectives();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    nouns();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONJUNCTION:
      prepositional_phrase();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void verb_phrase() throws ParseException {
 System.out.print("\u005cn(VERB PHRASE \u005cn\u005ct");
    verbs();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINER:
    case ADJECTIVE:
    case ADJECTIVE_COMPARATIVE:
    case ADJECTIVE_SUPERLATIVE:
    case NOUN_SINGULAR:
    case NOUN_PLURAL:
    case NOUN_PROPER_SINGULAR:
    case NOUN_PROPER_PLURAL:
      noun_phrase();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONJUNCTION:
      prepositional_phrase();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADVERB:
    case ADVERB_COMPARATIVE:
    case ADVERB_SUPERLATIVE:
    case ADBERB_PARTICIPLE:
      adverb();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void prepositional_phrase() throws ParseException {
    jj_consume_token(CONJUNCTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DETERMINER:
    case ADJECTIVE:
    case ADJECTIVE_COMPARATIVE:
    case ADJECTIVE_SUPERLATIVE:
    case NOUN_SINGULAR:
    case NOUN_PLURAL:
    case NOUN_PROPER_SINGULAR:
    case NOUN_PROPER_PLURAL:
      noun_phrase();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void nouns() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOUN_SINGULAR:
      t = jj_consume_token(NOUN_SINGULAR);
                       System.out.print("(SINGULAR NOUN " +t.image);
      break;
    case NOUN_PLURAL:
      t = jj_consume_token(NOUN_PLURAL);
                     System.out.print("(PLURAL NOUN " +t.image);
      break;
    case NOUN_PROPER_SINGULAR:
      t = jj_consume_token(NOUN_PROPER_SINGULAR);
                              System.out.print("(PROPER SINGULAR NOUN " +t.image);
      break;
    case NOUN_PROPER_PLURAL:
      t = jj_consume_token(NOUN_PROPER_PLURAL);
                            System.out.print("(PROPER PLURAL NOUN " +t.image);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void adjectives() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADJECTIVE:
      t = jj_consume_token(ADJECTIVE);
                   System.out.print("(ADJECTIVE " +t.image);
      break;
    case ADJECTIVE_COMPARATIVE:
      t = jj_consume_token(ADJECTIVE_COMPARATIVE);
                               System.out.print("(COMPARATIVE ADJECTIVE " +t.image);
      break;
    case ADJECTIVE_SUPERLATIVE:
      t = jj_consume_token(ADJECTIVE_SUPERLATIVE);
                               System.out.print("(SUPERLATIVE ADJECTIVE " +t.image);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void verbs() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERB_BASE:
      t = jj_consume_token(VERB_BASE);
                   System.out.print("(VERB BASE " +t.image);
      break;
    case VERB_3RD_PERSON_SINGULAR_PRESENT:
      t = jj_consume_token(VERB_3RD_PERSON_SINGULAR_PRESENT);
                                          System.out.print("(VERB SINGULAR PRESENT " +t.image);
      break;
    case VERB_PAST_TENSE:
      t = jj_consume_token(VERB_PAST_TENSE);
                        System.out.print("(VERB PAST TENSE ");
      break;
    case VERB_PAST_PARTICIPLE:
      t = jj_consume_token(VERB_PAST_PARTICIPLE);
                              System.out.print("(VERB PAST PARTICIPLE " +t.image);
      break;
    case VERB_PRESENT_PARTICIPLE:
      t = jj_consume_token(VERB_PRESENT_PARTICIPLE);
                                 System.out.print("(VERB PRESENT PARTICIPLE " +t.image);
      break;
    case VERB_MODAL_AUXILLIARY:
      t = jj_consume_token(VERB_MODAL_AUXILLIARY);
                               System.out.print("(VERB MODAL AUX " +t.image);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void adverb() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADVERB:
      t = jj_consume_token(ADVERB);
                 System.out.print("(ADVERB" +t.image);
      break;
    case ADVERB_COMPARATIVE:
      t = jj_consume_token(ADVERB_COMPARATIVE);
                            System.out.print("(ADVERB COMPARATIVE " +t.image);
      break;
    case ADVERB_SUPERLATIVE:
      t = jj_consume_token(ADVERB_SUPERLATIVE);
                            System.out.print("(ADVERB SUPERLATIVE " +t.image);
      break;
    case ADBERB_PARTICIPLE:
      t = jj_consume_token(ADBERB_PARTICIPLE);
                            System.out.print("(ADVERB PARTICIPLE " +t.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void determiner() throws ParseException {
                    Token t;
    t = jj_consume_token(DETERMINER);
                   System.out.print("(DETERMINER " +t.image);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0xfb8800,0x80000,0x200,0x200,0x200,0xfb8800,0x800,0x38000,0x4000,0xf38800,0x4000,0xf0000000,0xf38800,0xf00000,0x38000,0x80000,0xf0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x40f8,0x0,0x0,0x0,0x0,0xf8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8,0x0,};
   }

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
